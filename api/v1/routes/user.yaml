# This document is used to describe the user path.
# It contains the data schema, as well as the endpoints
# It should be changed whenever the returned structure changes as well.
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: The auto-generated id of the User.
          example: '879127udh12f23'
        username:
          type: string
          description: Name of the user
          example: 'John Doe'
        city:
          type: string
          description: What city does the user live in?
          example: 'Chicago'
        street:
          type: string
          description: What street does the user live in?
          example: '5th Av.'
        housenum:
          type: string
          description: What house number does the user live in?
          example: '25'
        createdAt:
          type: string
          format: date
          description: The date of the record creation. Will be automatially added when user is created
          example: '2020-11-14T11:51:48.402Z'
    UserNotFoundException:
      type: object
      properties:
        msg:
          type: string
          description: The message that is linked to this error
          example: 'The user you are looking for could not be found'
    UserUnexpectedErrorException:
      type: object
      properties:
        msg:
          type: string
          description: The message that is linked to this error
          example: 'An unexpected error occured'

# User endpoint
/user:
  get:
    summary: Returns a list of all users from the database
    tags: [Users]
    produces:
     - application/json
    responses:
      200:
        description: Returns the users saved in the DB as an array
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
        links:
          getUserById:
            description: The id - value returned in the response can be used as the id parameter in `GET user/{id}/`
            operationId: getUserById
            parameters:
              userId: $response.body#/id
          updateUserById:
            description: The id - value returned in the response can be used as the id parameter in `PUT user/{id}/`
            operationId: updateUserById
            parameters:
              userId: $response.body#/id
          deleteUserById:
            description: The id - value returned in the response can be used as the id parameter in `DELETE user/{id}/`
            operationId: deleteUserById
            parameters:
              userId: $response.body#/id
      500:
        description: Returns an object describing the unexpected server error that occured
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUnexpectedErrorException'
  post:
    summary: Creates a new user and writes it to the database
    tags: [Users]
    consumes:
      - application/json
    produces:
    	- application/json
    requestBody:
      description: For posting a user, you do not need to specify the id and createdAt params, they'll be handled by the server. All other fields are, however, mandatory
      required: true,
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    responses:
      201:
        description: Indicates that the user has been created successfully. Created user will be returned.
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: "Successfully wrote user into database"
                data:
                  $ref: '#/components/schemas/User'
      500:
        description: Bad request. Not all necessary params have been provided
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUnexpectedErrorException'

# User endpoint with id - path param
/user/{id}:
  get:
    summary: Returns a single user identified by its id
    operationId: getUserById
    tags: [Users]
    consumes:
    	- application/json
    produces:
    	- application/json
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: Unique ID of the user
    responses:
      200:
        description: Users
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      404:
        description: Returns an object describing the not-found exception that occured
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserNotFoundException'
  put:
    summary: Updates a single user by its id
    operationId: updateUserById
    tags: [Users]
    consumes:
    	- application/json
    produces:
    	- application/json
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: Unique ID of the user
    requestBody:
      description: Updated user data to be saved in the database
      required: true,
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    responses:
      200:
        description: Returns the updated userdata
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      404:
        description: Returns an object describing the not-found exception that occured
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserNotFoundException'
  delete:
    summary: Deletes a user by its id
    tags: [Users]
    consumes:
    	- application/json
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: Unique ID of the user
    responses:
      204:
        description: An empty response indicating that the user has been deleted
      404:
        description: Returns an object describing the not-found exception that occured
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserNotFoundException'